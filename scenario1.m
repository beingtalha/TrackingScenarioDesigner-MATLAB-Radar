% % Generated by MATLAB(R) 23.2 (R2023b) and Sensor Fusion and Tracking Toolbox 23.2 (R2023b).
% % Generated on: 24-Oct-2023 11:33:42
% 
% scenario = createScenario();
% [tp, platp, detp, covp] = createPlotters();
% 
% % Configure your tracker here:
% 
% % Add a trackPlotter here:
% 
% % Main simulation loop
% while advance(scenario) && ishghandle(tp.Parent)
%     % generate sensor data
%     [dets, configs, sensorConfigPIDs] = detect(scenario);
% 
%     [truePosition, meas, measCov] = readData(scenario, dets);
% 
%     % update your tracker here:
% 
%     % update plots
%     plotPlatform(platp,truePosition);
%     plotDetection(detp,meas,measCov);
%     plotCoverage(covp,coverageConfig(scenario));
% 
%     % Update the trackPlotter here:
% 
%     drawnow
% end
% 
% 
% function [position, meas, measCov] = readData(scenario,dets)
% allDets = [dets{:}];
% 
% if ~isempty(allDets)
%     % extract column vector of measurement positions
%     meas = cat(2,allDets.Measurement)';
% 
%     % extract measurement noise
%     measCov = cat(3,allDets.MeasurementNoise);
% else
%     meas = zeros(0,3);
%     measCov = zeros(3,3,0);
% end
% 
% truePoses = platformPoses(scenario);
% position = vertcat(truePoses(:).Position);
% end
% 
% 
% function [tp, platp, detp, covp] = createPlotters
% % Create plotters
% tp = theaterPlot('XLim', [-39388.4800634669 39896.3165367251], 'YLim', [-43504.6044593577 35780.1921408341], 'ZLim', [-73964.8210707418 5319.97552945012]);
% set(tp.Parent,'YDir','reverse', 'ZDir','reverse');
% view(tp.Parent, -37.5, 30);
% platp = platformPlotter(tp,'DisplayName','Platforms','MarkerFaceColor','k');
% detp = detectionPlotter(tp,'DisplayName','Detections','MarkerSize',6,'MarkerFaceColor',[0.85 0.325 0.098],'MarkerEdgeColor','k','History',10000);
% covp = coveragePlotter(tp,'DisplayName','Sensor Coverage');
% end
% 
% 
% function scenario = createScenario
% % Create Scenario
% scenario = trackingScenario;
% scenario.StopTime = Inf;
% scenario.UpdateRate = 0;
% 
% 
% % Create platforms
% Tower = platform(scenario,'ClassID',3);
% Tower.Dimensions = struct( ...
%     'Length', 10, ...
%     'Width', 10, ...
%     'Height', 60, ...
%     'OriginOffset', [0 0 30]);
% 
% Plane = platform(scenario,'ClassID',1);
% Plane.Dimensions = struct( ...
%     'Length', 40, ...
%     'Width', 30, ...
%     'Height', 10, ...
%     'OriginOffset', [0 0 0]);
% Plane.Signatures = {...
%     rcsSignature(...
%         'EnablePolarization', false, ...
%         'Pattern', [20 20;20 20], ...
%         'Azimuth', [-180 180], ...
%         'Elevation', [-90;90], ...
%         'Frequency', [0 1e+20], ...
%         'FluctuationModel', 'Swerling0')};
% Plane.Trajectory = waypointTrajectory( ...
%     [-11921 -37590 -3000;2467 -38170 -2555;13362 -37389 -3000;27251 -32760 -3000;33203 -8289 -3000;32542 2954 -3000;27912 12874 -3000;19976 22133 -3000;10717 26101 -3000;-1188 29408 -3000;-12431 29408 -3000;-18383 22795 -3000;-23674 14858 -1500;-32272 -353 -3000;-32272 -12919 -3000;-29626 -24162 -3000;-21690 -30776 -3000;-14415 -34744 -3000;-7801 -36067 -16030], ...
%     'GroundSpeed', [250;250;250;250;250;250;250;250;250;250;250;250;250;250;250;250;250;250;250], ...
%     'ClimbRate', [-17.9045211328431;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;698.232785567168], ...
%     'AutoPitch', true, ...
%     'AutoBank', true, ...
%     'JerkLimit', 0);
% 
% 
% % Create sensors
% Rotator = fusionRadarSensor('SensorIndex', 1, ...
%     'UpdateRate', 4, ...
%     'MountingLocation', [0 0 -60], ...
%     'FieldOfView', [30 60], ...
%     'HasINS', true, ...
%     'HasFalseAlarms', false, ...
%     'HasOcclusion', false, ...
%     'DetectionCoordinates', 'Scenario', ...
%     'AzimuthResolution', 3.6, ...
%     'RangeResolution', 60, ...
%     'MaxAzimuthScanRate', 90);
% 
% 
% % Assign sensors to platforms
% Tower.Sensors = Rotator;
% end

%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Generated by MATLAB(R) 23.2 (R2023b) and Sensor Fusion and Tracking Toolbox 23.2 (R2023b).
% Generated on: 24-Oct-2023 12:43:48

scenario = createScenario();
[tp, platp, detp, covp] = createPlotters();

% Configure your tracker here:

% Add a trackPlotter here:

% Main simulation loop
while advance(scenario) && ishghandle(tp.Parent)
    % generate sensor data
    [dets, configs, sensorConfigPIDs] = detect(scenario);
    
    [truePosition, meas, measCov] = readData(scenario, dets);
    
    % update your tracker here:
    
    % update plots
    plotPlatform(platp,truePosition);
    plotDetection(detp,meas,measCov);
    plotCoverage(covp,coverageConfig(scenario));
    
    % Update the trackPlotter here:
    
    drawnow
end


function [position, meas, measCov] = readData(scenario,dets)
allDets = [dets{:}];

if ~isempty(allDets)
    % extract column vector of measurement positions
    meas = cat(2,allDets.Measurement)';

    % extract measurement noise
    measCov = cat(3,allDets.MeasurementNoise);
else
    meas = zeros(0,3);
    measCov = zeros(3,3,0);
end

truePoses = platformPoses(scenario);
position = vertcat(truePoses(:).Position);
end


function [tp, platp, detp, covp] = createPlotters
% Create plotters
tp = theaterPlot('XLim', [-39388.4800634669 39896.3165367251], 'YLim', [-43504.6044593577 35780.1921408341], 'ZLim', [-73964.8210707418 5319.97552945012]);
set(tp.Parent,'YDir','reverse', 'ZDir','reverse');
view(tp.Parent, -37.5, 30);
platp = platformPlotter(tp,'DisplayName','Platforms','MarkerFaceColor','k');
detp = detectionPlotter(tp,'DisplayName','Detections','MarkerSize',6,'MarkerFaceColor',[0.85 0.325 0.098],'MarkerEdgeColor','k','History',10000);
covp = coveragePlotter(tp,'DisplayName','Sensor Coverage');
end


function scenario = createScenario
% Create Scenario
scenario = trackingScenario;
scenario.StopTime = Inf;
scenario.UpdateRate = 0;


% Create platforms
Tower = platform(scenario,'ClassID',3);
Tower.Dimensions = struct( ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 60, ...
    'OriginOffset', [0 0 30]);

Plane = platform(scenario,'ClassID',1);
Plane.Dimensions = struct( ...
    'Length', 40, ...
    'Width', 30, ...
    'Height', 10, ...
    'OriginOffset', [0 0 0]);
Plane.Signatures = {...
    rcsSignature(...
        'EnablePolarization', false, ...
        'Pattern', [20 20;20 20], ...
        'Azimuth', [-180 180], ...
        'Elevation', [-90;90], ...
        'Frequency', [0 1e+20], ...
        'FluctuationModel', 'Swerling0')};
Plane.Trajectory = waypointTrajectory( ...
    [-11921 -37590 -3000;2467 -38170 -2555;13362 -37389 -3000;27251 -32760 -3000;33203 -8289 -3000;32542 2954 -3000;27912 12874 -3000;19976 22133 -3000;10717 26101 -3000;-1188 29408 -3000;-12431 29408 -3000;-18383 22795 -3000;-23674 14858 -3157;-32272 -353 -3000;-32272 -12919 -3000;-29626 -24162 -3000;-21690 -30776 -3000;-14415 -34744 -3000;-7801 -36067 -2963], ...
    'GroundSpeed', [ 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250; 250], ...
    'ClimbRate', [-17.9045211328431;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;-1.98270246093516], ...
    'AutoPitch', true, ...
    'AutoBank', true, ...
    'JerkLimit', 0);


% Create sensors
Rotator = fusionRadarSensor('SensorIndex', 1, ...
    'UpdateRate', 4, ...
    'MountingLocation', [0 0 -60], ...
    'FieldOfView', [30 60], ...
    'HasINS', true, ...
    'HasFalseAlarms', false, ...
    'HasOcclusion', false, ...
    'DetectionCoordinates', 'Scenario', ...
    'AzimuthResolution', 3.6, ...
    'RangeResolution', 60, ...
    'MaxAzimuthScanRate', 90);


% Assign sensors to platforms
Tower.Sensors = Rotator;
end


